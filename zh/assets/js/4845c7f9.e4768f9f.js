"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[7589],{3905:(e,t,n)=>{n.d(t,{Zo:()=>u,kt:()=>f});var a=n(7294);function r(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function l(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);t&&(a=a.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,a)}return n}function i(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?l(Object(n),!0).forEach((function(t){r(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):l(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function s(e,t){if(null==e)return{};var n,a,r=function(e,t){if(null==e)return{};var n,a,r={},l=Object.keys(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var l=Object.getOwnPropertySymbols(e);for(a=0;a<l.length;a++)n=l[a],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var o=a.createContext({}),p=function(e){var t=a.useContext(o),n=t;return e&&(n="function"==typeof e?e(t):i(i({},t),e)),n},u=function(e){var t=p(e.components);return a.createElement(o.Provider,{value:t},e.children)},c="mdxType",m={inlineCode:"code",wrapper:function(e){var t=e.children;return a.createElement(a.Fragment,{},t)}},d=a.forwardRef((function(e,t){var n=e.components,r=e.mdxType,l=e.originalType,o=e.parentName,u=s(e,["components","mdxType","originalType","parentName"]),c=p(n),d=r,f=c["".concat(o,".").concat(d)]||c[d]||m[d]||l;return n?a.createElement(f,i(i({ref:t},u),{},{components:n})):a.createElement(f,i({ref:t},u))}));function f(e,t){var n=arguments,r=t&&t.mdxType;if("string"==typeof e||r){var l=n.length,i=new Array(l);i[0]=d;var s={};for(var o in t)hasOwnProperty.call(t,o)&&(s[o]=t[o]);s.originalType=e,s[c]="string"==typeof e?e:r,i[1]=s;for(var p=2;p<l;p++)i[p]=n[p];return a.createElement.apply(null,i)}return a.createElement.apply(null,n)}d.displayName="MDXCreateElement"},5162:(e,t,n)=>{n.d(t,{Z:()=>i});var a=n(7294),r=n(6010);const l={tabItem:"tabItem_Ymn6"};function i(e){let{children:t,hidden:n,className:i}=e;return a.createElement("div",{role:"tabpanel",className:(0,r.Z)(l.tabItem,i),hidden:n},t)}},4866:(e,t,n)=>{n.d(t,{Z:()=>y});var a=n(7462),r=n(7294),l=n(6010),i=n(2466),s=n(6775),o=n(1980),p=n(7392),u=n(12);function c(e){return function(e){return r.Children.map(e,(e=>{if(!e||(0,r.isValidElement)(e)&&function(e){const{props:t}=e;return!!t&&"object"==typeof t&&"value"in t}(e))return e;throw new Error(`Docusaurus error: Bad <Tabs> child <${"string"==typeof e.type?e.type:e.type.name}>: all children of the <Tabs> component should be <TabItem>, and every <TabItem> should have a unique "value" prop.`)}))?.filter(Boolean)??[]}(e).map((e=>{let{props:{value:t,label:n,attributes:a,default:r}}=e;return{value:t,label:n,attributes:a,default:r}}))}function m(e){const{values:t,children:n}=e;return(0,r.useMemo)((()=>{const e=t??c(n);return function(e){const t=(0,p.l)(e,((e,t)=>e.value===t.value));if(t.length>0)throw new Error(`Docusaurus error: Duplicate values "${t.map((e=>e.value)).join(", ")}" found in <Tabs>. Every value needs to be unique.`)}(e),e}),[t,n])}function d(e){let{value:t,tabValues:n}=e;return n.some((e=>e.value===t))}function f(e){let{queryString:t=!1,groupId:n}=e;const a=(0,s.k6)(),l=function(e){let{queryString:t=!1,groupId:n}=e;if("string"==typeof t)return t;if(!1===t)return null;if(!0===t&&!n)throw new Error('Docusaurus error: The <Tabs> component groupId prop is required if queryString=true, because this value is used as the search param name. You can also provide an explicit value such as queryString="my-search-param".');return n??null}({queryString:t,groupId:n});return[(0,o._X)(l),(0,r.useCallback)((e=>{if(!l)return;const t=new URLSearchParams(a.location.search);t.set(l,e),a.replace({...a.location,search:t.toString()})}),[l,a])]}function _(e){const{defaultValue:t,queryString:n=!1,groupId:a}=e,l=m(e),[i,s]=(0,r.useState)((()=>function(e){let{defaultValue:t,tabValues:n}=e;if(0===n.length)throw new Error("Docusaurus error: the <Tabs> component requires at least one <TabItem> children component");if(t){if(!d({value:t,tabValues:n}))throw new Error(`Docusaurus error: The <Tabs> has a defaultValue "${t}" but none of its children has the corresponding value. Available values are: ${n.map((e=>e.value)).join(", ")}. If you intend to show no default tab, use defaultValue={null} instead.`);return t}const a=n.find((e=>e.default))??n[0];if(!a)throw new Error("Unexpected error: 0 tabValues");return a.value}({defaultValue:t,tabValues:l}))),[o,p]=f({queryString:n,groupId:a}),[c,_]=function(e){let{groupId:t}=e;const n=function(e){return e?`docusaurus.tab.${e}`:null}(t),[a,l]=(0,u.Nk)(n);return[a,(0,r.useCallback)((e=>{n&&l.set(e)}),[n,l])]}({groupId:a}),h=(()=>{const e=o??c;return d({value:e,tabValues:l})?e:null})();(0,r.useLayoutEffect)((()=>{h&&s(h)}),[h]);return{selectedValue:i,selectValue:(0,r.useCallback)((e=>{if(!d({value:e,tabValues:l}))throw new Error(`Can't select invalid tab value=${e}`);s(e),p(e),_(e)}),[p,_,l]),tabValues:l}}var h=n(2389);const k={tabList:"tabList__CuJ",tabItem:"tabItem_LNqP"};function b(e){let{className:t,block:n,selectedValue:s,selectValue:o,tabValues:p}=e;const u=[],{blockElementScrollPositionUntilNextRender:c}=(0,i.o5)(),m=e=>{const t=e.currentTarget,n=u.indexOf(t),a=p[n].value;a!==s&&(c(t),o(a))},d=e=>{let t=null;switch(e.key){case"Enter":m(e);break;case"ArrowRight":{const n=u.indexOf(e.currentTarget)+1;t=u[n]??u[0];break}case"ArrowLeft":{const n=u.indexOf(e.currentTarget)-1;t=u[n]??u[u.length-1];break}}t?.focus()};return r.createElement("ul",{role:"tablist","aria-orientation":"horizontal",className:(0,l.Z)("tabs",{"tabs--block":n},t)},p.map((e=>{let{value:t,label:n,attributes:i}=e;return r.createElement("li",(0,a.Z)({role:"tab",tabIndex:s===t?0:-1,"aria-selected":s===t,key:t,ref:e=>u.push(e),onKeyDown:d,onClick:m},i,{className:(0,l.Z)("tabs__item",k.tabItem,i?.className,{"tabs__item--active":s===t})}),n??t)})))}function N(e){let{lazy:t,children:n,selectedValue:a}=e;const l=(Array.isArray(n)?n:[n]).filter(Boolean);if(t){const e=l.find((e=>e.props.value===a));return e?(0,r.cloneElement)(e,{className:"margin-top--md"}):null}return r.createElement("div",{className:"margin-top--md"},l.map(((e,t)=>(0,r.cloneElement)(e,{key:t,hidden:e.props.value!==a}))))}function g(e){const t=_(e);return r.createElement("div",{className:(0,l.Z)("tabs-container",k.tabList)},r.createElement(b,(0,a.Z)({},e,t)),r.createElement(N,(0,a.Z)({},e,t)))}function y(e){const t=(0,h.Z)();return r.createElement(g,(0,a.Z)({key:String(t)},e))}},8359:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>o,contentTitle:()=>i,default:()=>m,frontMatter:()=>l,metadata:()=>s,toc:()=>p});var a=n(7462),r=(n(7294),n(3905));n(4866),n(5162);const l={id:"test",title:"\u6d4b\u8bd5",type:"reference",displayed_sidebar:"api"},i=void 0,s={unversionedId:"python/test",id:"python/test",title:"\u6d4b\u8bd5",description:"\u6027\u80fd\u6d4b\u8bd5API\u6682\u4e0d\u7a33\u5b9a\u3002\u9700\u8981\u6536\u96c6\u66f4\u591a\u610f\u89c1\u3002",source:"@site/i18n/zh/docusaurus-plugin-content-docs/current/python/test.mdx",sourceDirName:"python",slug:"/python/test",permalink:"/zh/docs/python/test",draft:!1,editUrl:"https://g.hz.netease.com/deploy/torchpipe-docs/-/tree/master/website/i18n/zh/docusaurus-plugin-content-docs/current/python/test.mdx",tags:[],version:"current",lastUpdatedBy:"zhangshiyang",lastUpdatedAt:1691480970,formattedLastUpdatedAt:"2023\u5e748\u67088\u65e5",frontMatter:{id:"test",title:"\u6d4b\u8bd5",type:"reference",displayed_sidebar:"api"},sidebar:"api",previous:{title:"\u7f16\u8bd1",permalink:"/zh/docs/python/compile"},next:{title:"\u57fa\u7840\u6027\u540e\u7aef",permalink:"/zh/docs/backend-reference/basic"}},o={},p=[{value:"\u6d4b\u8bd5",id:"\u6d4b\u8bd5",level:2},{value:"<em>torchpipe.utils.test.test_from_raw_file</em>",id:"torchpipeutilstesttest_from_raw_file",level:3},{value:"<em>torchpipe.utils.test.test_functions</em>",id:"torchpipeutilstesttest_functions",level:3},{value:"<em>torchpipe.utils.test.test</em>",id:"torchpipeutilstesttest",level:3},{value:"<em>torchpipe.utils.test.RandomSampler</em>",id:"torchpipeutilstestrandomsampler",level:3},{value:"<em>torchpipe.utils.test.LoopSampler</em>",id:"torchpipeutilstestloopsampler",level:3},{value:"\u4f8b\u5b50",id:"\u4f8b\u5b50",level:2},{value:"\u793a\u4f8b\uff1a\u904d\u5386\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6",id:"\u793a\u4f8b\u904d\u5386\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6",level:3},{value:"\u793a\u4f8b\uff1athrift",id:"\u793a\u4f8bthrift",level:3},{value:"\u4e0d\u540cbatchsize\u7684\u5ba2\u6237\u7aef",id:"\u4e0d\u540cbatchsize\u7684\u5ba2\u6237\u7aef",level:3}],u={toc:p},c="wrapper";function m(e){let{components:t,...n}=e;return(0,r.kt)(c,(0,a.Z)({},u,n,{components:t,mdxType:"MDXLayout"}),(0,r.kt)("admonition",{title:"\u9a8c\u8bc1\u9636\u6bb5",type:"caution"},(0,r.kt)("p",{parentName:"admonition"},"\u6027\u80fd\u6d4b\u8bd5API\u6682\u4e0d\u7a33\u5b9a\u3002\u9700\u8981\u6536\u96c6\u66f4\u591a\u610f\u89c1\u3002"),(0,r.kt)("p",{parentName:"admonition"},"\u6b64\u90e8\u5206\u7684API\u57280.3.1b1\u7248\u672c\u6709\u4e86\u7834\u574f\u6027\u53d8\u66f4\uff1b"),(0,r.kt)("p",{parentName:"admonition"},"0.3.0\u7248\u672c\u6587\u6863\u8bf7\u67e5\u9605",(0,r.kt)("a",{parentName:"p",href:"https://g.hz.netease.com/deploy/torchpipe-docs/-/blob/0.3.0%E6%80%A7%E8%83%BD%E6%B5%8B%E8%AF%95API/website/docs/python/test.mdx"},"\u6b64\u5904"),".")),(0,r.kt)("p",null,"torchpipe.utils.test \u96c6\u6210\u4e86\u591a\u5ba2\u6237\u7aef/\u591a\u7ebf\u7a0b\u6027\u80fd\u6d4b\u8bd5\u548c\u5e76\u53d1\u63a8\u7406\u5de5\u5177\u3002\n\u901a\u5e38\u60c5\u51b5\u4e0b\uff0c\u6211\u4eec\u63a8\u8350\u529f\u80fd\u66f4\u5f3a\u5927\u7684",(0,r.kt)("a",{parentName:"p",href:"https://locust.io/"},"locust"),"\uff0c\u7136\u800c\uff0c\u5982\u679c\u4f60\u53ea\u9700\u8981\u4e00\u4e2a\u7b80\u5355\u7684\u811a\u672c\uff0c\u53bb\u65b9\u4fbf\u7684\u6d4b\u672c\u5730\u51fd\u6570\u548c\u8fdc\u7a0b\u51fd\u6570\u8c03\u7528\uff0c\u5e76\u7ed9\u51fa\u6d4b\u8bd5\u62a5\u544a\uff0c\u6216\u8005\u5e76\u53d1\u7684\u8c03\u7528\u51fd\u6570\u5e76\u5904\u7406\u7ed3\u679c\uff0c\u53ef\u4ee5\u7528\u6b64\u5de5\u5177\u3002"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"locust")),(0,r.kt)("th",{parentName:"tr",align:null},(0,r.kt)("em",{parentName:"th"},"torchpipe.utils.test")))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u57fa\u4e8e\u4e8b\u4ef6\u9a71\u52a8\uff0c\u53ef\u4ee5\u652f\u6301\u66f4\u9ad8\u7684\u5e76\u53d1\u6570, \u53ef\u5206\u5e03\u5f0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u57fa\u4e8e\u672c\u5730\u7ebf\u7a0b\uff0c\u5e76\u53d1\u6570\u6709\u9650\uff0c\u4e0d\u652f\u6301\u5206\u5e03\u5f0f")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u62e5\u6709web\u7aef\u6a21\u5f0f"),(0,r.kt)("td",{parentName:"tr",align:null},"\u65e0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},"\u652f\u6301\u6269\u5c55"),(0,r.kt)("td",{parentName:"tr",align:null},"\u652f\u6301\u6269\u5c55")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:null},(0,r.kt)("inlineCode",{parentName:"td"},"locust -f target.py")),(0,r.kt)("td",{parentName:"tr",align:null},"python\u51fd\u6570")))),(0,r.kt)("h2",{id:"\u6d4b\u8bd5"},"\u6d4b\u8bd5"),(0,r.kt)("h3",{id:"torchpipeutilstesttest_from_raw_file"},(0,r.kt)("em",{parentName:"h3"},"torchpipe.utils.test.test_from_raw_file")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_from_raw_file(forward_function: \n                        Callable[[List[tuple[str, bytes]]]] | \n                        List[Callable[[List[tuple[str, bytes]]]]], \n                file_dir: str, \n                num_clients=10, \n                batch_size=1, \n                total_number=10000,\n                num_preload=1000,\n                recursive=True, \n                ext=[\".jpg\", '.JPG', '.jpeg', '.JPEG'])\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u8bfb\u53d6\u7ed9\u5b9a\u6587\u4ef6\u8def\u5f84\u4e0b\u7684\u6307\u5b9a\u540e\u7f00\u540d\u7684\u6587\u4ef6\uff0c\u5e76\u53d1\u9001\u5165\u7528\u6237\u7ed9\u5b9a\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"forward_function"),"\u4e2d\u3002")),(0,r.kt)("admonition",{title:"\u53c2\u6570",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"forward_function")," - \u524d\u5411\u51fd\u6570, \u51fd\u6570\u53c2\u6570\u4e3a",(0,r.kt)("inlineCode",{parentName:"li"},"List[Tuple[str, bytes]]"),"\uff0c\u4ee3\u8868",(0,r.kt)("em",{parentName:"li"},"batchsize","[(id,\u6587\u4ef6\u6570\u636e)]"),"\u3002\u6d4b\u8bd5\u7a0b\u5e8f\u5c06\u53cd\u590d\u6267\u884c\u6b64\u51fd\u6570\uff0c\u5e76\u8bb0\u5f55\u6b64\u51fd\u6570\u7684\u5ef6\u8fdf\u76f8\u5173\u6570\u636e\u3002 \u4e5f\u53ef\u4ee5\u4e3a\u591a\u4e2a\u6b64\u7c7b\u51fd\u6570\uff08",(0,r.kt)("inlineCode",{parentName:"li"},"List[Callable]"),"\uff09, \u6b64\u65f6\u957f\u5ea6\u9700\u8981\u4e3anum_clients."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"file_dir")," - \u6587\u4ef6\u8def\u5f84"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"num_clients")," - \u5ba2\u6237\u7aef\u6570\u76ee/\u5e76\u53d1\u8def\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"batch_size")," \u6bcf\u6b21\u8bf7\u6c42\u7684\u6570\u636ebatch\u5927\u5c0f, \u4ee3\u8868\u6267\u884c\u4e00\u6b21",(0,r.kt)("inlineCode",{parentName:"li"},"forward_function"),"\u6240\u6d88\u8017\u7684\u6d4b\u8bd5\u6570\u636e\u91cf"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"total_number")," \u603b\u5171\u7684\u6570\u636e\u91cf\u3002\u4ec5\u5f53",(0,r.kt)("inlineCode",{parentName:"li"},"num_preload>0"),"\u65f6\u6709\u6548\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"num_preload")," \u9884\u8bfb\u53d6\u6587\u4ef6\u6570\u76ee\u3002\u5f53",(0,r.kt)("inlineCode",{parentName:"li"},"num_preload<=0"),"\u65f6\uff0c\u5c06\u904d\u5386\u6240\u6709\u6587\u4ef6\uff08\u6587\u4ef6\u6570\u636e\u4e3aNone\uff09\uff1b\u5f53",(0,r.kt)("inlineCode",{parentName:"li"},"num_preload>0"),"\u65f6\uff0c\u5c06\u9884\u5148\u8bfb\u53d6\u8fd9\u4e2a\u6570\u91cf\u7684\u6570\u636e\uff0c\u5176\u4ed6\u6570\u636e\u5c06\u88ab\u820d\u5f03\u3002\u5f53",(0,r.kt)("inlineCode",{parentName:"li"},"0<num_preload<total_number"),"\u65f6\uff0c\u4f1a\u5faa\u73af\u9001\u5165\u6570\u636e\u3002"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"recursive")," \u662f\u5426\u9012\u5f52\u8bfb\u53d6\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"ext")," - \u6587\u4ef6\u540e\u7f00"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'from typing import List,Tuple\nimport torchpipe as tp\nfrom torchpipe.utils.test import test_from_raw_file\n\nmodel = tp.pipe({"backend":"DecodeMat","instance_num":10})\n\ndef forward_function(files : List[Tuple[str,bytes]]):\n    inputs = []\n    for file_path, file_bytes in files:\n        input = {"data": file_bytes}\n        inputs.append(input)\n    model(inputs)\n\n    for input in inputs:\n        result = input["result"] \n    # \u5982\u679c\u9700\u8981\u4fdd\u5b58\u7ed3\u679c\uff0c\u53ef\u5c06(img_path, result)\u4fdd\u5b58\u5728\u5168\u5c40Queue\u4e2d\n\n## \u9884\u8bfb\u53d61000\u5f20\u56fe\u7247\u6d4b\u8bd5\u901f\u5ea6\ntest_from_raw_file(forward_function, os.path.join("assets/norm_jpg/"),\n            num_clients=10, batch_size=1,total_number=10000)\n## \u904d\u5386\u5168\u90e8\u6570\u636e\ntest_from_raw_file(forward_function, os.path.join("assets/norm_jpg/"),\n            num_clients=10, batch_size=1,num_preload=0)\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"Result"),(0,r.kt)("table",null,(0,r.kt)("thead",{parentName:"table"},(0,r.kt)("tr",{parentName:"thead"},(0,r.kt)("th",{parentName:"tr",align:"center"},"Project"),(0,r.kt)("th",{parentName:"tr",align:"center"},"Value"))),(0,r.kt)("tbody",{parentName:"table"},(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"tool's version"),(0,r.kt)("td",{parentName:"tr",align:"center"},"20230421.0")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"num_clients"),(0,r.kt)("td",{parentName:"tr",align:"center"},"10")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"total_number"),(0,r.kt)("td",{parentName:"tr",align:"center"},"10000")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"throughout::qps"),(0,r.kt)("td",{parentName:"tr",align:"center"},"1642.34")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"throughout::avg"),(0,r.kt)("td",{parentName:"tr",align:"center"},"6.09(ms)")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"latency::TP50"),(0,r.kt)("td",{parentName:"tr",align:"center"},"5.17")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"latency::TP90"),(0,r.kt)("td",{parentName:"tr",align:"center"},"7.56")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"latency::TP99"),(0,r.kt)("td",{parentName:"tr",align:"center"},"21.88")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"latency::avg"),(0,r.kt)("td",{parentName:"tr",align:"center"},"6.08")),(0,r.kt)("tr",{parentName:"tbody"},(0,r.kt)("td",{parentName:"tr",align:"center"},"-50,-40,-20,-10,-1"),(0,r.kt)("td",{parentName:"tr",align:"center"},"24.82,25.84,29.37,30.6,50.34")))))),(0,r.kt)("h3",{id:"torchpipeutilstesttest_functions"},(0,r.kt)("em",{parentName:"h3"},"torchpipe.utils.test.test_functions")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_functions(forward_function:Union[Callable,List[Callable]], \n                num_clients=10, \n                batch_size=1, \n                total_number=10000)\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u91cd\u590d\u6267\u884c\u7528\u6237\u7ed9\u5b9a\u7684",(0,r.kt)("inlineCode",{parentName:"p"},"forward_function"),"\u51fd\u6570\u3002")),(0,r.kt)("admonition",{title:"\u53c2\u6570",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"forward_function")," - \u524d\u5411\u51fd\u6570\uff1b\u53c2\u6570\u4e3a",(0,r.kt)("inlineCode",{parentName:"li"},"None"),"\u3002\u6d4b\u8bd5\u7a0b\u5e8f\u5c06\u53cd\u590d\u6267\u884c\u6b64\u51fd\u6570\uff0c\u5e76\u8bb0\u5f55\u6b64\u51fd\u6570\u7684\u5ef6\u8fdf\u76f8\u5173\u6570\u636e\u3002 \u4e5f\u53ef\u4ee5\u4e3aList",(0,r.kt)("inlineCode",{parentName:"li"},"[Function]"),", \u6b64\u65f6\u5176\u957f\u5ea6\u9700\u8981\u4e3anum_clients."),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"num_clients")," - \u5ba2\u6237\u7aef\u6570\u76ee/\u5e76\u53d1\u8def\u6570"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"batch_size")," \u6bcf\u6b21\u8bf7\u6c42\u7684\u6570\u636ebatch\u5927\u5c0f, \u4ee3\u8868\u6267\u884c\u4e00\u6b21",(0,r.kt)("inlineCode",{parentName:"li"},"forward_function"),"\u6240\u6d88\u8017\u7684\u6d4b\u8bd5\u6570\u636e\u91cf"),(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"total_number")," \u603b\u5171\u7684\u6570\u636e\u91cf\u3002"))),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'import torchpipe as tp\nfrom torchpipe.utils.test import test_functions\n\nmodel = tp.pipe({"backend":"DecodeMat","instance_num":10})\n\nfile_path = "assets/norm_jpg/dog.jpg"\nwith open(file_path, \'rb\') as f:\n    file_bytes=f.read()\n\ndef run():\n    input = {"data": file_bytes}\n    model(input)\n    assert(input["result"].shape==(576, 768, 3))\n\ntorchpipe.utils.test.test_functions(run, num_clients=5, batch_size=1,total_number=1000)\n'))),(0,r.kt)("h3",{id:"torchpipeutilstesttest"},(0,r.kt)("em",{parentName:"h3"},"torchpipe.utils.test.test")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def torchpipe.utils.test.test(sample :Union[Sampler, List[Sampler]],\n                            total_number=10000):\n")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u6a21\u62df\u591a\u4e2a\u5ba2\u6237\u7aef\u6267\u884c",(0,r.kt)("inlineCode",{parentName:"p"},"sample"),"\u6307\u5b9a\u7684\u8ba1\u7b97\u5e76\u7edf\u8ba1\u8ba1\u7b97\u7ed3\u679c\u3002")),(0,r.kt)("admonition",{title:"\u53c2\u6570",type:"tip"},(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"sample")," - \u5ba2\u6237\u7aef\u6570\u636e\u751f\u6210\u5668\uff0c\u5b83\u7684\u4e2a\u6570\u5c31\u4ee3\u8868\u5ba2\u6237\u7aef\u7684\u6570\u91cf\uff0c\u9700\u8981\u5b9a\u4e49\u4e3a\u4ee5\u4e0b\u7c7b\u7684\u5b50\u7c7b\uff1a")),(0,r.kt)("pre",{parentName:"admonition"},(0,r.kt)("code",{parentName:"pre",className:"language-python"},"class torchpipe.utils.test.Sampler:\n    def __init__(self):\n        pass\n    def __call__(self, start_index: int) -> None:\n        raise NotImplementedError\n\n    def batchsize(self):\n        return 1\n")),(0,r.kt)("ul",{parentName:"admonition"},(0,r.kt)("li",{parentName:"ul"},(0,r.kt)("strong",{parentName:"li"},"total_number")," - \u5c06\u8ba1\u7b97\u7684\u603b\u6570\u636e\u91cf\u3002\u7cfb\u7edf\u6bcf\u6267\u884c\u4e00\u6b21",(0,r.kt)("inlineCode",{parentName:"li"},"Sampler().__call__(start_index)"),", \u6570\u636e\u91cf\u4e3a",(0,r.kt)("inlineCode",{parentName:"li"},"Sampler().batchsize()"),"\u3002\u8c03\u7528\u65f6\u6ee1\u8db3",(0,r.kt)("inlineCode",{parentName:"li"},"0 <= start_index <= total_number - Sampler.batchsize()"),"."))),(0,r.kt)("h3",{id:"torchpipeutilstestrandomsampler"},(0,r.kt)("em",{parentName:"h3"},"torchpipe.utils.test.RandomSampler")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u4ece\u4f20\u5165\u7684\u6570\u636e(List)\u4e2d\u968f\u673a\u9009\u53d6batch_size\u7684\u6570\u636e\u3002\u9700\u8981\u5b9e\u73b0\u5176",(0,r.kt)("inlineCode",{parentName:"p"},"forward"),"\u51fd\u6570\u4f5c\u4e3a\u771f\u6b63\u7684\u8ba1\u7b97\u90e8\u5206\u3002")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'class torchpipe.utils.test.RandomSampler(Sampler):\n    def __init__(self, data_source: List, batch_size=1):\n        super().__init__()\n        self.data_source = data_source\n        self.batch_size = batch_size\n\n        assert(0 < len(self.data_source))\n        for i in range(batch_size):\n            if len(self.data_source) < batch_size:\n                self.data_source.append(self.data_source[i])\n        \n\n    def __call__(self, start_index: int):\n        data = random.sample(self.data_source, self.batch_size)\n        self.forward(data)\n\n    def forward(self, data: List):\n        raise RuntimeError("Requires users to implement this function")\n\n    def batchsize(self):\n        return self.batch_size\n')),(0,r.kt)("details",null,(0,r.kt)("summary",null,"\u793a\u4f8b"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_function_from_preload(forward_function, \n                    file_dir:str, \n                    num_clients=10, \n                    batch_size=1, \n                    total_number=10000, \n                    recursive=True,\n                    ext=[\".jpg\", '.JPG', '.jpeg', '.JPEG']):\n    from torchpipe.utils.test.Sampler import RandomSampler, preload\n    data  = preload(file_dir=file_dir, recursive=recursive, max_number=1000, ext=ext)\n    assert(len(data) > 0)\n    \n    forwards = [RandomSampler(data, batch_size) for i in range(num_clients)]\n    for m in forwards:\n        m.forward = forward_function\n    torchpipe.utils.test.test(forwards, total_number)\n"))),(0,r.kt)("h3",{id:"torchpipeutilstestloopsampler"},(0,r.kt)("em",{parentName:"h3"},"torchpipe.utils.test.LoopSampler")),(0,r.kt)("blockquote",null,(0,r.kt)("p",{parentName:"blockquote"},"\u5bf9\u4f20\u5165\u7684\u6570\u636e(List)\u5168\u91cf\u6309\u987a\u5e8f\u7684\u9001\u5165\u8ba1\u7b97\u3002\u4e0eSequentialSampler\u4e0d\u540c\u7684\u662f\uff0c\u5141\u8bb8",(0,r.kt)("inlineCode",{parentName:"p"},"start_index > len(self.data) - self.batch_size"),", \u4e5f\u5c31\u662f\u5141\u8bb8",(0,r.kt)("inlineCode",{parentName:"p"},"total_number > len(self.data)"),".")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'\nclass LoopSampler(Sampler):\n    def __init__(self, data: List, batch_size=1):\n        super().__init__()\n        self.data = data\n        self.batch_size = batch_size\n        assert(len(data) >= batch_size)\n        self.length = len(data)\n        for i in range(batch_size):\n            self.data.append(data[i])\n\n    def __call__(self, start_index: int) -> None:\n        start_index = start_index%(self.length)\n        data = self.data[start_index: start_index+self.batch_size]\n        self.forward(data)\n\n    def batchsize(self):\n        return self.batch_size\n\n    def forward(self, data: List):\n        raise RuntimeError("Requires users to implement this function")\n')),(0,r.kt)("h2",{id:"\u4f8b\u5b50"},"\u4f8b\u5b50"),(0,r.kt)("h3",{id:"\u793a\u4f8b\u904d\u5386\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6"},"\u793a\u4f8b\uff1a\u904d\u5386\u76ee\u5f55\u4e0b\u7684\u6587\u4ef6"),(0,r.kt)("p",null,"\u4ee5\u4e0b\u6f14\u793a\u4e86\u5982\u4f55\u5c06\u6587\u4ef6\u5939\u4e0b\u7684\u6240\u6709\u76ee\u6807\u6587\u4ef6\u904d\u5386\u4e00\u904d\u5e76\u83b7\u53d6\u7ed3\u679c\u3002"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import torchpipe\nclass FileSampler(torchpipe.utils.test.LoopSampler):\n    def __init__(self, data: List, batch_size=1):\n        super.__init__(data, batch_size)\n        self.local_result = {}\n\n    def forward(self, data: List):\n        raw_bytes = []\n        for file_path in data:\n            with open(file_path, \"rb\") as f:\n                raw_bytes.append((file_path, f.read()))\n        self.handle_data(raw_bytes)\n\n    def handle_data(self, raw_bytes):\n        raise RuntimeError(\"Requires users to implement this function\")\n\ndef test_all_files(file_dir:str, num_clients=10, batch_size = 1,\n                     ext=[\".jpg\", '.JPG', '.jpeg', '.JPEG']):\n\n    files = [x for x in os.listdir(file_dir) if os.path.splitext(x)[-1] in ext]\n    files = [os.path.join(file_dir, x) for x in files]\n\n    \n\n    forwards = [FileSampler(files, i, batch_size) for i in range(num_clients)]\n\n    torchpipe.utils.test.test(forwards, len(files))\n")),(0,r.kt)("p",null,"\u7528\u6237\u53ef\u4ee5\u628a\u7ed3\u679c\u4e34\u65f6\u4fdd\u5b58\u5728",(0,r.kt)("inlineCode",{parentName:"p"},"self.local_result"),"\u4e2d\uff0c\u6700\u7ec8\u8fdb\u884c\u6c47\u603b\uff0c\u4e5f\u53ef\u4ee5\u5728\u8fd0\u884c\u65f6\u5b9e\u65f6\u6821\u9a8c\u6570\u636e\u3002"),(0,r.kt)("h3",{id:"\u793a\u4f8bthrift"},"\u793a\u4f8b\uff1athrift"),(0,r.kt)("p",null,"\u9996\u5148\uff0c\u6839\u636e\u5b9e\u9645\u4f7f\u7528\u7684thrift\u534f\u8bae\u5b9a\u4e49\u5176\u6570\u636e\u524d\u5411\u51fd\u6570\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"import torchpipe\nclass ThriftSampler(torchpipe.utils.test.FileSampler):\n    def __init__(self, data: List, host, port,batch_size=1, ):\n        super.__init__(data, batch_size)\n        self.local_result = {}\n\n        from serve import InferenceService\n        from serve.ttypes import InferenceParams\n        self.InferenceParams = InferenceParams\n\n        from thrift.transport import TSocket\n        from thrift.transport import TTransport\n        from thrift.protocol import TBinaryProtocol\n\n        self.transport = TSocket.TSocket(host, port)\n        self.transport = TTransport.TBufferedTransport(self.transport)\n        self.protocol = TBinaryProtocol.TBinaryProtocol(self.transport)\n\n        self.client = InferenceService.Client(self.protocol)\n\n        # Connect!\n        self.transport.open()\n        self.client.ping()\n\n    def handle_data(self, raw_bytes: List[Tuple[str, bytes]]):\n         return self.client.infer_batch([self.InferenceParams(*x) for x in raw_bytes])\n     \n    def __del__(self):\n        self.transport.close()\n")),(0,r.kt)("p",null,"\u5982\u679c\u8fdb\u884c\u901f\u5ea6\u6d4b\u8bd5\uff0c\u53ef\u4ee5\u9884\u8bfb\u53d6\u56fe\u7247\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'# for test speed\ndef test_function_from_preload():\n    files = [x for x in os.listdir(file_dir) if os.path.splitext(x)[-1] in ext]\n    files = [os.path.join(file_dir, x) for x in files]\n\n    forwards = [ThriftSampler(files, i, batch_size) for i in range(num_clients)]\n    forward_methods = [x.handle_data for x in forwards]\n\n    torchpipe.uitls.test.test_from_raw_file(forward_methods, os.path.join("assets/norm_jpg/"),\n            num_clients=10, batch_size=1,total_number=10000)\n')),(0,r.kt)("p",null,"\u5426\u5219\uff0c\u53ef\u4ee5\u8003\u8651\u5168\u91cf\u6570\u636e\u6d4b\u8bd5\uff1a"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"def test_all_files(file_dir:str, num_clients=10, batch_size = 1,\n                     ext=[\".jpg\", '.JPG', '.jpeg', '.JPEG']):\n\n    files = [x for x in os.listdir(file_dir) if os.path.splitext(x)[-1] in ext]\n    files = [os.path.join(file_dir, x) for x in files]\n\n    forwards = [ThriftSampler(files, i, batch_size) for i in range(num_clients)]\n\n    torchpipe.utils.test.test(forwards, len(files))\n\n\n")),(0,r.kt)("h3",{id:"\u4e0d\u540cbatchsize\u7684\u5ba2\u6237\u7aef"},"\u4e0d\u540cbatchsize\u7684\u5ba2\u6237\u7aef"),(0,r.kt)("p",null,"\u5728",(0,r.kt)("a",{parentName:"p",href:"https://g.hz.netease.com/deploy/torchpipe/-/blob/master/examples/yolox/yolox_multithreads_test.py"},"\u6b64\u5904\u4f8b\u5b50"),"\u4e2d\uff0c\u6211\u4eec\u4f7f\u7528\u5341\u4e2a\u5ba2\u6237\u7aef\uff0c\u5ba2\u6237\u7aef\u6bcf\u6b21\u8bf7\u6c42\u7684\u6570\u636e\u91cf\u5206\u522b\u4e3a1\uff0c2\uff0c3\uff0c...10\u3002\u6211\u4eec\u9a8c\u8bc1\u4e86\u5728\u8fd9\u79cd\u60c5\u51b5\u4e0b\u7ed3\u679c\u7684\u4e00\u81f4\u6027\u3002\n\u901a\u5e38\u6765\u8bb2\uff0c\u7528\u6237\u53ef\u904d\u5386\u4e00\u4e2a\u76ee\u5f55\u4e2d\u7684\u6240\u6709\u6570\u636e\uff0c\u5e76\u591a\u6b21\u91cd\u590d\u53d1\u9001\uff0c\u4ee5\u9a8c\u8bc1\u7ed3\u679c\u7684\u7a33\u5b9a\u6027\u548c\u4e00\u81f4\u6027\u3002"),(0,r.kt)("admonition",{title:"tensorrt\u6a21\u578b\u63a8\u7406\u7ed3\u679c\u4e0d\u4e00\u81f4",type:"warning"},(0,r.kt)("p",{parentName:"admonition"},"\u5982\u679c\u6a21\u578b\u672c\u8eabbatchsize>1,tensorrt\u63a8\u7406\u7ed3\u679c\u53ef\u80fd\u4f1a\u6709\u5c11\u91cf\u5dee\u5f02\uff08\u8f93\u5165\u6570\u636e\u7684batchsize\u4e0d\u540c\u65f6\uff0c\u6a21\u578b\u9009\u53d6\u7684\u4f18\u5316\u65b9\u6cd5\u53ef\u80fd\u4e0d\u540c\uff09\uff1b\u5982\u679cbatchsize==1\uff0c\u8fd9\u79cd\u5dee\u5f02\u4e0d\u5e94\u8be5\u5b58\u5728\uff0c\u7136\u800c\u91cd\u65b0\u751f\u6210\u6a21\u578b\u540e\uff0c\u63a8\u7406\u7ed3\u679c\u4ecd\u7136\u6709\u53ef\u80fd\u53d8\u5316\u3002")))}m.isMDXComponent=!0}}]);